#include "packet.h"

int main(int argc, char **argv){
  srand (time (0));
  int sockfd;
  struct sockaddr_in servaddr;

  if(argc != 4) {
    perror("Usage: client ipaddr portnum Filename");
  }

  int port = atoi(argv[2]);
  if(port <= 1024) perror("Bad port number, please choose port higher than 1024");
  int *file_size = malloc(sizeof(int));
  char* file = file_read(argv[3], file_size);

  if((sockfd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) < 0){
    perror("problem creating socket");
    exit(2);
  }
  memset(&servaddr, 0, sizeof(servaddr));
  servaddr.sin_family = AF_INET;
  servaddr.sin_addr.s_addr = inet_addr(argv[1]);
  servaddr.sin_port = htons(port);
  /*  if(connect(sockfd, (struct sockaddr *) &servaddr, sizeof(servaddr)) < 0){
      perror("Problem in connecting to the server");
      exit(3);
      }*/
  packet* outgoing_packet = malloc(sizeof(packet));
  packet* incoming_packet = malloc(sizeof(packet));
  memset(outgoing_packet, 0, sizeof(packet));
  memset(incoming_packet, 0, sizeof(packet));
  srand(time(NULL));
  int seq_num = rand() % SEQ_MAX;
  int packet_size = sizeof(packet);
  int serlen = sizeof(servaddr);
  outgoing_packet = init_1st_packet(outgoing_packet, seq_num);
  srand(time(NULL));
  //////////////////////////////////////////////////1st handshake packet

  if(sendto(sockfd, outgoing_packet, sizeof(packet), 0, (struct sockaddr*)&servaddr, sizeof(servaddr)) == -1){
    fatal_err("Bad initial handshake", 1);
  }
  print_packet_header(SEND, outgoing_packet->header);
  //////////////////////////////////////////////await second hanshake

  do{
    if(recvfrom(sockfd, incoming_packet, packet_size, 0, (struct sockaddr*) &servaddr, &serlen) == -1){
      fatal_err("BAD PACKET", 1);
    }
    if(check_2nd_handshake(incoming_packet) == 1) break;

  }while(1);
  print_packet_header(RECV, incoming_packet->header);


  int max_packet_num= (*file_size % DATA_SIZE) == 0 ? *file_size / DATA_SIZE : *file_size / DATA_SIZE + 1;
  int current_packet = 0;
  int next_ack = 0;
  int current_sequence = 0;
  int current_window = 0;
  int seq_calc = 0;
  do{
    int sent_packets = 0;
    int cur_cycle_seq = current_sequence;
    int cur_cycle_pos = current_window;
    while((sent_packets < WINDOW_SIZE) && (cur_cycle_pos < *file_size)){
      memset(outgoing_packet, 0, sizeof(packet));
      int mem_window  = (*file_size - cur_cycle_pos) < DATA_SIZE ? *file_size - cur_cycle_pos : DATA_SIZE;
      seq_calc = (cur_cycle_seq)* 512 + seq_num + 1;
      if(seq_calc > SEQ_MAX) seq_calc = seq_calc % SEQ_MAX;
      outgoing_packet = init_payload_packet(outgoing_packet, seq_calc, 0, file + cur_cycle_pos, mem_window);
      outgoing_packet->header.payload = mem_window;
      if(sendto(sockfd, outgoing_packet, sizeof(packet), 0, (struct sockaddr*)&servaddr, sizeof(servaddr))== -1){
                                                                                                                 fatal_err("Bad outgoing packet", 1);
                                                                                                                 }
      sent_packets++;
      cur_cycle_seq++;
      cur_cycle_pos += mem_window;
      print_packet_header(SEND, outgoing_packet->header);
    }
    int acked_packets = 0;
    while(acked_packets < sent_packets){
      if(recvfrom(sockfd, incoming_packet, packet_size, 0, (struct sockaddr*) &servaddr, &serlen) == -1){
      }
      else if(incoming_packet->header.ack_num >= next_ack){
        current_packet++;
        next_ack++;
        current_sequence++;
        current_window += DATA_SIZE;
        acked_packets++;
        print_packet_header(RECV, incoming_packet->header);
      }
    }
  }while(current_packet < max_packet_num);
  ////FIN
  do{
    outgoing_packet = init_fin_packet(outgoing_packet, seq_calc);
    if(sendto(sockfd, outgoing_packet, sizeof(packet), 0, (struct sockaddr*)&servaddr, sizeof(servaddr)) == -1){
      fatal_err("Bad outgoing fin", 1);
    }
    print_packet_header(SEND, outgoing_packet->header);
    if(recvfrom(sockfd, incoming_packet, packet_size, 0, (struct sockaddr*) &servaddr, &serlen) == -1){
    }
    print_packet_header(RECV, incoming_packet->header);
    if(incoming_packet->header.ack != 1) {
      continue;
    }
    if(recvfrom(sockfd, incoming_packet, packet_size, 0, (struct sockaddr*) &servaddr, &serlen) == -1){
    }
    print_packet_header(RECV, incoming_packet->header);
    if(incoming_packet->header.fin != 1) {
      continue;
    }
    else {
      break;
    }
  }while(1);
  close(sockfd);
  free(file);

  time_t begin = clock();
  time_t end = clock();
  while(end - begin < 2000000)
    end = clock();
}
